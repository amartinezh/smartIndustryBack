
import * as util from "util";
import { LogGrowPos } from "../../models/smartIndustry/log";
import { LogEnum } from "../../models/smartIndustry/log.enum";
import * as dotenv from 'dotenv'
import { Pool, Client } from 'pg';

export class DataBaseService {
    private log
    private static instance: DataBaseService;
    private connection;
    private pool;

    private constructor() {
        try {

            dotenv.config();

            const pool = new Pool({
                user: process.env.DBUSER,
                host: process.env.HOST,
                database: process.env.DATABASE,
                password: process.env.PASSWORD,
                port: 5432
            });

            this.pool = pool;

            // the pool will emit an error on behalf of any idle clients
            // it contains if a backend error or network partition happens
            pool.on('error', (err, client) => {
                console.error('Unexpected error on idle client', err)
                process.exit(-1)
            });

            /*pool.query('SELECT NOW()', (err, res) => {
                console.log(err, res)
                pool.end()
            })*/

        } catch (error) {
            this.log = new LogGrowPos()
            //this.log.insertLog(LogEnum.ERROR, `${DataBaseService.name} -> ${this.constructor.name}: ${error}`)
            console.log('An error occurred while the connection was created ' + error + ` ${DataBaseService.name} -> constructor`);
        }
    }

    static getInstance() {
        try {
            if (!DataBaseService.instance) {
                DataBaseService.instance = new DataBaseService();
            }
            return DataBaseService.instance;
        } catch (error) {
            //this.log.insertLog(LogEnum.ERROR, `${DataBaseService.name} -> ${this.getInstance.name}: ${error}`)
            console.log('An error occurred while the instance was returned ' + error + ` ${DataBaseService.name} -> ${this.getInstance.name}`);
        }
    }

    public getConnection() {
        try {
            return new Promise((resolve, reject) => {
                try {
<<<<<<< HEAD:src/db/dev/dataBaseService.ts
                     this.pool.getConnection((err, connection) => {
=======
                    /*this.pool.getConnection((err, connection) => {
>>>>>>> 6365fe3c3acaea66dd4096e5ddf23e0beac5c87e:src/dataBaseService.ts
                        if (err) {
                            reject(err);
                        }
                        connection.query = util.promisify(connection.query).bind(connection)
                        connection.beginTransaction = util.promisify(connection.beginTransaction).bind(connection)
                        connection.commit = util.promisify(connection.commit).bind(connection)
                        resolve(connection)
                    });*/
                } catch (error) {
                    this.log.insertLog(LogEnum.ERROR, `${DataBaseService.name} -> ${this.getConnection.name} promise: ${error}`)
                }
            });
        } catch (error) {
            this.log.insertLog(LogEnum.ERROR, `${DataBaseService.name} -> ${this.getConnection.name}: ${error}`)
        }
    }

    public query(sql, args) {
        return new Promise((resolve, reject) => {
            this.connection.query(sql, args, (err, rows) => {
                if (err)
                    return reject(err);
                resolve(rows);
            });
        });
    }


}

